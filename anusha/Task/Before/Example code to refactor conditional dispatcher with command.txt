
// As example, we will refactor a Worker class which subscribes to several AMQP queues and processes incoming messages.

class WorkflowWorker
{
    private $entityManager;
    private $serializer;

    public function __construct(EntityManager $entityManager, Serializer $serializer, Channel $channel)
    {
        $this->entityManager = $entityManager;
        $this->serializer = $serializer;

        $channel->subscribe(array($this, 'onMessage'));
    }

    public function onMessage($queue, AMQPMessage $message)
    {
        switch ($queue) {
            case 'workflow_execution_termination':
                return $this->consumeExecutionTermination($message);

            case 'workflow_execution_details':
                return $this->consumeExecutionDetails($message);

            default:
                throw new \LogicException('Unsupported queue.');
        }
    }

    public function consumeExecutionDetails(AMQPMessage $message)
    {
        $input = json_decode($message->body, true);

        if ( ! isset($input['execution_id'])) {
            throw new \InvalidArgumentException('"execution_id" attribute was not set.');
        }

        $execution = $this->entityManager->find('Workflow:WorkflowExecution', $input['execution_id']);
        if (null === $execution) {
            throw new \InvalidArgumentException(
                sprintf('There is no execution with id "%s".', $input['execution_id']));
        }

        return $this->serializer->serialize($execution, 'json');
    }

    public function consumeExecutionTermination(AMQPMessage $message)
    {
        $input = json_decode($message->body, true);

        /** @var $execution WorkflowExecution */
        $execution = $this->entityManager->getRepository('Workflow:WorkflowExecution')
                                            ->getByIdExclusive($input['execution_id']);

        $execution->terminate();
        $this->entityManager->persist($execution);
        $this->entityManager->flush();

        return '';
    }

    // ...
}